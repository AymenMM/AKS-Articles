# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
- repo: self

stages:
- stage: Validate
  jobs:
  - job: Validate
    continueOnError: false
    steps:
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform v0.12.1'
      inputs:
        terraformVersion: 0.12.3
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: 1-terraform
        backendType: azurerm
        backendServiceArm: 'Azure SPN'
        backendAzureRmResourceGroupName: 'AKSTerraform-RG'
        backendAzureRmStorageAccountName: 'nyuenterraformstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'demo.terraform.tfstate'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'
      inputs:
        command: validate
        workingDirectory: 1-terraform
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: 1-terraform
        environmentServiceName: 'Azure SPN'
        secureVarsFile: 'aks_conf.tfvars'
        commandOptions: '-out $(Build.ArtifactStagingDirectory)/terraform_aks_out'
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: terraform_out

- stage: Deploy
  jobs:
    # track deployments on the environment
  - deployment: Deploy Terraform
    pool:
      vmImage: 'ubuntu-latest'
    # creates an environment if it doesnâ€™t exist
    environment: 'DEV'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: terraform_out
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: apply
              workingDirectory: $(Pipeline.Workspace)/terraform_out
              environmentServiceName: 'Azure SPN'
              commandOptions: 'terraform_aks_out'
            